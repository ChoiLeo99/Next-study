// 중요한 개념 정리

> React란?

자바스크립트 라이브러리로 UI를 만들기 위해 사용하는 라이브러리

리액트에서 만든 어플리케이션 → SPA (Single Page Application)

리액트를 사용해 SPA를 구현한다면 CSR (Client Side Rendering)

CSR 장점

1. 한번 로딩 되면, 빠른 UX 제공
2. 서버의 부하가 작음

CSR 단점

1. 페이지 로딩 시간(TTV → Time To View) 이 길다
    1. FCP (First Contentful Paint) 까지의 시간이 길다
2. 자바스크립트 활성화 필수다
3. SEO 최적화가 힘듬
4. 보안에 취약함
5. CDN에 캐시가 안됨
    1. CDN 이란? → Content Delivery Network

라이브러리 → 도구들 ex) React

프레임워크 → 정해진 골격을 주는 설계도 같은 것 ex) Angular, IOS, Android

---

> NextJs란?
> 

웹 어플리케이션을 만들기위한 리액트 프레임워크

SSR (Server Side Rendering) 하이브리 렌더링 가능

SSG (Static Site Generation)

언제 렌더링을 하냐?

SSG → 어플리케이션을 서버에 배포해서 처음으로 빌드할 때 렌더링

1. 클라이언트에서 서버에 홈페이지 줘 요청 시작
2. 서버는 만들어진 페이지만 보냄
3. 클라이언트는 받아온 파일을 표기
4. 서버측에서 미리 만들어둬서 다음에 사용자가 접속하면 서버까지 가지않고 CDN에서 파일을 받아옴

SSG 장점

1. 페이지 로딩 시간 (TTV) 이 빠름
2. 자바스크립트 필요 없음
3. SEO 최적화가 좋음
4. 보안이 뛰어남
5. CDN에 캐시가 됨

SSG 단점

1. 데이터가 정적임
    1. 데이터가 가변적으로 변하는 웹사이트인 경우엔 안 좋음
2. 사용자별 정보 제공의 어려움

→ 이런 문제점을 해결하기 위해 나온게 ISR, SSR

ISR (Incremental Static Regeneration)

언제 렌더링을 하냐?

렌더링 하는 주체자는 여전히 서버이고 주기적으로 렌더링

SSG와 동일한 원리.

단, 정해진 주기에 따라 페이지를 다시 생성함

ISR 장점

1. 페이지 로딩 시간이 빠름
2. 자바스크립트 필요 없음
3. SEO 최적화가 좋음
4. 보안이 뛰어남
5. CDN에 캐시가 됨
6. 데이터가 주기적으로 업데이트 됨

ISR 단점

1. 실시간 데이터가 아님
2. 사용자별 정보 제공의 어려움

→ 이런 문제점을 해결하기 위해 나온게 SSR